import { CreateRequestDto } from './dto/create-request.dto';
import { UpdateRequestDto } from './dto/update-request.dto';
import { Repository } from 'typeorm';
import { Requests } from './entities/request.entity';
import { RequestDetailMaeService } from '../request-detail-mae/request-detail-mae.service';
import { User } from '../auth/entities/user.entity';
import { Customer } from '../customer/entities/customer.entity';
import { Address } from '../address/entities/address.entity';
import { Vehicle } from '../logistics/vehicle/entities/vehicle.entity';
import { Driver } from '../logistics/driver/entities/driver.entity';
import { DetailCatalog } from '../detail-catalog/entities/detail-catalog.entity';
import { ExternalAddress } from '../external-addresses/entities/external-address.entity';
import { Company } from '../companies/entities/company.entity';
import { ConfigService } from '@nestjs/config';
import { WebsocketGateway } from '../websocket/websocket.gateway';
import { PanicAlertDto } from './dto/panic-alert.dto';
import { LocationDto } from './dto/location.dto';
export declare class RequestService {
    private readonly requestRepository;
    private readonly requestDetailService;
    private readonly configService;
    private readonly webSocketGateway;
    constructor(requestRepository: Repository<Requests>, requestDetailService: RequestDetailMaeService, configService: ConfigService, webSocketGateway: WebsocketGateway);
    create(createRequestDto: CreateRequestDto, user: User): Promise<{
        request: {
            user: {
                id: string;
                name: string;
            };
            createdAt: string;
            id: number;
            customer: string | Customer;
            proforma: string;
            typeVehicle: string | DetailCatalog;
            addressId: string | Address;
            externalAddress: string | ExternalAddress;
            withdrawalTime: string;
            withdrawalDate: Date;
            estimatedDate: Date;
            confirmation: string;
            capacityVehicle: string | DetailCatalog;
            observation: string;
            news: string;
            detail: import("../request-detail-mae/entities/request-detail-mae.entity").RequestDetailMae[];
            instruments: import("../instruments/entities/instrument.entity").Instrument[];
            status: string | DetailCatalog;
            vehicle: string | Vehicle;
            requirements: DetailCatalog[];
            machinery: DetailCatalog[];
            tools: DetailCatalog[];
            link: string;
            driver: string | Driver;
            assistants: Driver[];
            unity: string | DetailCatalog;
            confirmationLogistic: boolean;
            company: string | Company;
            contract: string | import("../contract/contract/entities/contract.entity").Contract;
            city: string;
            provincia: string;
            canton: string;
            addressBranch: string;
            numRequest: number;
            updatedAt: Date;
        };
    }>;
    findAll(user: User, initialDate: string, endDate: string, status: string, city: string, vehicle: string, plate: string): Promise<{
        requests: {
            user: {
                id: string;
                name: string;
            };
            createdAt: string;
            id: number;
            customer: string | Customer;
            proforma: string;
            typeVehicle: string | DetailCatalog;
            addressId: string | Address;
            externalAddress: string | ExternalAddress;
            withdrawalTime: string;
            withdrawalDate: Date;
            estimatedDate: Date;
            confirmation: string;
            capacityVehicle: string | DetailCatalog;
            observation: string;
            news: string;
            detail: import("../request-detail-mae/entities/request-detail-mae.entity").RequestDetailMae[];
            instruments: import("../instruments/entities/instrument.entity").Instrument[];
            status: string | DetailCatalog;
            vehicle: string | Vehicle;
            requirements: DetailCatalog[];
            machinery: DetailCatalog[];
            tools: DetailCatalog[];
            link: string;
            driver: string | Driver;
            assistants: Driver[];
            unity: string | DetailCatalog;
            confirmationLogistic: boolean;
            company: string | Company;
            contract: string | import("../contract/contract/entities/contract.entity").Contract;
            city: string;
            provincia: string;
            canton: string;
            addressBranch: string;
            numRequest: number;
            updatedAt: Date;
        }[];
    }>;
    findOne(id: number): Promise<{
        request: {
            user: {
                id: string;
                name: string;
            };
            createdAt: string;
            id: number;
            customer: string | Customer;
            proforma: string;
            typeVehicle: string | DetailCatalog;
            addressId: string | Address;
            externalAddress: string | ExternalAddress;
            withdrawalTime: string;
            withdrawalDate: Date;
            estimatedDate: Date;
            confirmation: string;
            capacityVehicle: string | DetailCatalog;
            observation: string;
            news: string;
            detail: import("../request-detail-mae/entities/request-detail-mae.entity").RequestDetailMae[];
            instruments: import("../instruments/entities/instrument.entity").Instrument[];
            status: string | DetailCatalog;
            vehicle: string | Vehicle;
            requirements: DetailCatalog[];
            machinery: DetailCatalog[];
            tools: DetailCatalog[];
            link: string;
            driver: string | Driver;
            assistants: Driver[];
            unity: string | DetailCatalog;
            confirmationLogistic: boolean;
            company: string | Company;
            contract: string | import("../contract/contract/entities/contract.entity").Contract;
            city: string;
            provincia: string;
            canton: string;
            addressBranch: string;
            numRequest: number;
            updatedAt: Date;
        };
    }>;
    findOneToReception(id: number): Promise<Requests>;
    update(id: number, updateRequestDto: UpdateRequestDto): Promise<{
        message: string;
    }>;
    remove(id: number): Promise<{
        message: string;
    }>;
    getByStatus(): Promise<Requests[]>;
    getByDriver(user: User): Promise<Requests[]>;
    generatePdf(id: number): Promise<{
        data: string;
    }>;
    generateXML(id: number): Promise<{
        data: string;
        name: string;
    }>;
    findByPlate(plate: string): Promise<Requests>;
    sendAlert(body: PanicAlertDto): Promise<{
        message: string;
    }>;
    sendLocation(body: LocationDto): Promise<{
        message: string;
    }>;
    generateDataToXML(data: any): {
        generatedXml: string;
        nameFile: string;
    };
    formatDate(date: Date): string;
    formatData(requests: Requests[]): {
        user: {
            id: string;
            name: string;
        };
        createdAt: string;
        id: number;
        customer: string | Customer;
        proforma: string;
        typeVehicle: string | DetailCatalog;
        addressId: string | Address;
        externalAddress: string | ExternalAddress;
        withdrawalTime: string;
        withdrawalDate: Date;
        estimatedDate: Date;
        confirmation: string;
        capacityVehicle: string | DetailCatalog;
        observation: string;
        news: string;
        detail: import("../request-detail-mae/entities/request-detail-mae.entity").RequestDetailMae[];
        instruments: import("../instruments/entities/instrument.entity").Instrument[];
        status: string | DetailCatalog;
        vehicle: string | Vehicle;
        requirements: DetailCatalog[];
        machinery: DetailCatalog[];
        tools: DetailCatalog[];
        link: string;
        driver: string | Driver;
        assistants: Driver[];
        unity: string | DetailCatalog;
        confirmationLogistic: boolean;
        company: string | Company;
        contract: string | import("../contract/contract/entities/contract.entity").Contract;
        city: string;
        provincia: string;
        canton: string;
        addressBranch: string;
        numRequest: number;
        updatedAt: Date;
    }[];
    formatXml(environment: string, emision: string, razonSocial: string, commercialName: string, ruc: string, document: string, sequence: string, mainAddress: string, address: string, companyAddress: string, company: string, transportRuc: string, withdrawalDate: string, placa: string, companyName: string, driverRUC: string, driverPhone: string, driverEmail: string, numRequest: string, detail: any[], createdAt: string, estimatedDate: string): string;
    moduleEleven(code: string): number;
    generateSerial(id: number, size: number): string;
    dataToDocuments(id: number): Promise<{
        id: number;
        numRequest: string;
        proforma: string;
        razonSocial: string;
        commercialName: string;
        mainAddress: string;
        licence: string;
        wastedRegister: string;
        ruc: string;
        addressName: string;
        companyAddress: string;
        companyLicence: string;
        direction: string;
        directionWithdrawal: string;
        province: string;
        canton: string;
        parroquia: string;
        technicalName: string;
        technicalPhone: string;
        technicalEmail: string;
        requests: {
            unity: string | DetailCatalog;
            id: string;
            maeId: string | import("../mae/entities/mae.entity").Mae;
            wastes: import("../waste/entities/waste.entity").Waste[];
            requestId: number | Requests;
            weight: number;
            weightReception: number;
            originalTotalWeight: number;
            status: boolean;
        }[];
        vehicle: string;
        placa: string;
        vehicleLicence: string;
        vehicleDirection: string;
        driver: string;
        driverPhone: string;
        driverRUC: string;
        driverEmail: string;
        typeVehicle: string;
        observation: string;
        company: string;
        companyRuc: string;
        licenceCompany: string;
        companyDirection: string;
        externalName: string;
        externalPhone: string;
        externalRepresentative: string;
        externalLicence: string;
        withdrawalDate: Date;
        createdAt: string;
        estimatedDate: Date;
    }>;
}
